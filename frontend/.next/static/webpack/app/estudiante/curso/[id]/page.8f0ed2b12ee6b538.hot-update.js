"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/estudiante/curso/[id]/page",{

/***/ "(app-pages-browser)/./app/lib/api.ts":
/*!************************!*\
  !*** ./app/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClase: () => (/* binding */ createClase),\n/* harmony export */   createCurso: () => (/* binding */ createCurso),\n/* harmony export */   createDocente: () => (/* binding */ createDocente),\n/* harmony export */   createEstudiante: () => (/* binding */ createEstudiante),\n/* harmony export */   createMatricula: () => (/* binding */ createMatricula),\n/* harmony export */   createResultadoEvaluacion: () => (/* binding */ createResultadoEvaluacion),\n/* harmony export */   deleteCurso: () => (/* binding */ deleteCurso),\n/* harmony export */   deleteDocente: () => (/* binding */ deleteDocente),\n/* harmony export */   deleteEstudiante: () => (/* binding */ deleteEstudiante),\n/* harmony export */   listClases: () => (/* binding */ listClases),\n/* harmony export */   listCursos: () => (/* binding */ listCursos),\n/* harmony export */   listDocentes: () => (/* binding */ listDocentes),\n/* harmony export */   listEstudiantes: () => (/* binding */ listEstudiantes),\n/* harmony export */   listMatriculas: () => (/* binding */ listMatriculas),\n/* harmony export */   updateClase: () => (/* binding */ updateClase),\n/* harmony export */   updateCurso: () => (/* binding */ updateCurso),\n/* harmony export */   updateDocente: () => (/* binding */ updateDocente),\n/* harmony export */   updateEstudiante: () => (/* binding */ updateEstudiante)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// app/lib/api.ts\nvar _process_env_NEXT_PUBLIC_API_BASE;\nconst BASE = (_process_env_NEXT_PUBLIC_API_BASE = process.env.NEXT_PUBLIC_API_BASE) !== null && _process_env_NEXT_PUBLIC_API_BASE !== void 0 ? _process_env_NEXT_PUBLIC_API_BASE : 'http://127.0.0.1:8000';\nconst API = \"\".concat(BASE, \"/api\");\n/* ===== Utilidades ===== */ async function safeJson(res) {\n    const text = await res.text();\n    let data = undefined;\n    if (text) {\n        try {\n            data = JSON.parse(text);\n        } catch (e) {\n            // No era JSON (probable HTML). Lanza error con el texto plano.\n            if (!res.ok) throw new Error(\"HTTP \".concat(res.status, \" \").concat(res.statusText, \": \").concat(text.slice(0, 400)));\n            // si fuera 200 con HTML (raro), igual devolvemos el texto\n            return text;\n        }\n    }\n    if (!res.ok) {\n        throw new Error(typeof data === 'string' ? data : JSON.stringify(data || {\n            status: res.status\n        }));\n    }\n    return data;\n}\nasync function jsonFetch(url, init) {\n    const res = await fetch(url, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        ...init\n    });\n    return safeJson(res);\n}\n/* ==================== DOCENTES ==================== */ async function listDocentes() {\n    return jsonFetch(\"\".concat(BASE, \"/api/docentes/\"), {\n        cache: 'no-store'\n    });\n}\nasync function createDocente(payload) {\n    return jsonFetch(\"\".concat(BASE, \"/api/docentes/\"), {\n        method: 'POST',\n        body: JSON.stringify(payload)\n    });\n}\nasync function updateDocente(id, patch) {\n    return jsonFetch(\"\".concat(BASE, \"/api/docentes/\").concat(id, \"/\"), {\n        method: 'PATCH',\n        body: JSON.stringify(patch)\n    });\n}\nasync function deleteDocente(id) {\n    const res = await fetch(\"\".concat(BASE, \"/api/docentes/\").concat(id, \"/\"), {\n        method: 'DELETE'\n    });\n    if (!res.ok) throw new Error(await res.text());\n    return true;\n}\n/* ==================== ESTUDIANTES ==================== */ const listEstudiantes = ()=>jsonFetch(\"\".concat(BASE, \"/api/estudiantes/\"), {\n        cache: 'no-store'\n    });\nconst createEstudiante = (p)=>jsonFetch(\"\".concat(BASE, \"/api/estudiantes/\"), {\n        method: 'POST',\n        body: JSON.stringify(p)\n    });\nconst updateEstudiante = (id, p)=>jsonFetch(\"\".concat(BASE, \"/api/estudiantes/\").concat(id, \"/\"), {\n        method: 'PATCH',\n        body: JSON.stringify(p)\n    });\nconst deleteEstudiante = (id)=>jsonFetch(\"\".concat(BASE, \"/api/estudiantes/\").concat(id, \"/\"), {\n        method: 'DELETE'\n    });\n/* ==================== CURSOS ==================== */ const listCursos = ()=>jsonFetch(\"\".concat(BASE, \"/api/cursos/\"), {\n        cache: 'no-store'\n    });\nconst createCurso = (p)=>jsonFetch(\"\".concat(BASE, \"/api/cursos/\"), {\n        method: 'POST',\n        body: JSON.stringify(p)\n    });\nconst updateCurso = (id, p)=>jsonFetch(\"\".concat(BASE, \"/api/cursos/\").concat(id, \"/\"), {\n        method: 'PATCH',\n        body: JSON.stringify(p)\n    });\nconst deleteCurso = (id)=>jsonFetch(\"\".concat(BASE, \"/api/cursos/\").concat(id, \"/\"), {\n        method: 'DELETE'\n    });\n/* ==================== CLASES ==================== */ async function listClases(params) {\n    const q = new URLSearchParams();\n    if (params === null || params === void 0 ? void 0 : params.id_cur) q.append('id_cur', String(params.id_cur));\n    if (params === null || params === void 0 ? void 0 : params.id_dce) q.append('id_dce', String(params.id_dce));\n    const res = await fetch(\"\".concat(API, \"/clases/\").concat(q.toString() ? \"?\".concat(q.toString()) : ''));\n    if (!res.ok) throw new Error('Error listClases');\n    return res.json();\n}\nfunction createClase(body) {\n    const url = \"\".concat(BASE, \"/api/clases/\");\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    }).then(async (r)=>r.ok ? r.json() : Promise.reject(await r.text()));\n}\nasync function updateClase(id, payload) {\n    const res = await fetch(\"\".concat(API, \"/clases/\").concat(id, \"/\"), {\n        method: 'PATCH',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n    });\n    if (!res.ok) throw new Error('Error updateClase');\n    return res.json();\n}\n/* ==================== MATRÍCULAS ==================== */ const createMatricula = (p)=>fetch(\"\".concat(BASE, \"/api/matriculas/\"), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(p)\n    }).then(async (r)=>{\n        const t = await r.text();\n        const j = t ? JSON.parse(t) : undefined;\n        if (!r.ok) throw new Error(typeof j === 'string' ? j : JSON.stringify(j));\n        return j;\n    });\nasync function listMatriculas() {\n    const res = await fetch(\"\".concat(API, \"/matriculas/\"));\n    if (!res.ok) throw new Error('Error listMatriculas');\n    return res.json();\n}\n/* ==================== RESULTADOS (IA en backend) ==================== */ /**\r\n * Enviamos SOLO lo que la vista espera: id_est, id_cl, metrics.\r\n * El backend calcula nivel + recomendación y guarda:\r\n *   - nivelaten_re\r\n *   - atencion_ia_re\r\n * Devuelve { modelo, nivel, recomendacion, resultado: {...} }\r\n */ async function createResultadoEvaluacion(input) {\n    const res = await fetch(\"\".concat(API, \"/resultados/\"), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(input)\n    });\n    return safeJson(res);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/api.ts\n"));

/***/ })

});